{"ast":null,"code":"var _jsxFileName = \"D:\\\\mern_app_mini\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [auth, setAuth] = useState(null); // Store { user, token }\n\n  // Load auth state from localStorage on initial load\n  useEffect(() => {\n    const storedAuth = localStorage.getItem('auth');\n    if (storedAuth) {\n      try {\n        const parsedAuth = JSON.parse(storedAuth);\n        // Optional: Add token validation/expiration check here\n        setAuth(parsedAuth);\n      } catch (error) {\n        console.error(\"Failed to parse auth from localStorage\", error);\n        localStorage.removeItem('auth'); // Clear invalid data\n      }\n    }\n  }, []);\n  const login = (userData, token) => {\n    const authData = {\n      user: userData,\n      token\n    };\n    setAuth(authData);\n    localStorage.setItem('auth', JSON.stringify(authData));\n  };\n  const logout = () => {\n    setAuth(null);\n    localStorage.removeItem('auth');\n    // Optionally redirect to login page\n  };\n  const value = {\n    auth,\n    login,\n    logout,\n    isAuthenticated: !!(auth !== null && auth !== void 0 && auth.token),\n    // Check if token exists\n    token: auth === null || auth === void 0 ? void 0 : auth.token,\n    user: auth === null || auth === void 0 ? void 0 : auth.user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n};\n\n// Custom hook to use the AuthContext\n_s(AuthProvider, \"rvIDANynb054X/J0MJbkV+yIK+M=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","auth","setAuth","storedAuth","localStorage","getItem","parsedAuth","JSON","parse","error","console","removeItem","login","userData","token","authData","user","setItem","stringify","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/mern_app_mini/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [auth, setAuth] = useState(null); // Store { user, token }\r\n\r\n    // Load auth state from localStorage on initial load\r\n    useEffect(() => {\r\n        const storedAuth = localStorage.getItem('auth');\r\n        if (storedAuth) {\r\n            try {\r\n                 const parsedAuth = JSON.parse(storedAuth);\r\n                 // Optional: Add token validation/expiration check here\r\n                 setAuth(parsedAuth);\r\n            } catch (error) {\r\n                console.error(\"Failed to parse auth from localStorage\", error);\r\n                localStorage.removeItem('auth'); // Clear invalid data\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const login = (userData, token) => {\r\n        const authData = { user: userData, token };\r\n        setAuth(authData);\r\n        localStorage.setItem('auth', JSON.stringify(authData));\r\n    };\r\n\r\n    const logout = () => {\r\n        setAuth(null);\r\n        localStorage.removeItem('auth');\r\n        // Optionally redirect to login page\r\n    };\r\n\r\n    const value = {\r\n        auth,\r\n        login,\r\n        logout,\r\n        isAuthenticated: !!auth?.token, // Check if token exists\r\n        token: auth?.token,\r\n        user: auth?.user\r\n    };\r\n\r\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC;EACAE,SAAS,CAAC,MAAM;IACZ,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACZ,IAAI;QACC,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;QACzC;QACAD,OAAO,CAACI,UAAU,CAAC;MACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9DL,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;MACrC;IACJ;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;IAC/B,MAAMC,QAAQ,GAAG;MAAEC,IAAI,EAAEH,QAAQ;MAAEC;IAAM,CAAC;IAC1CZ,OAAO,CAACa,QAAQ,CAAC;IACjBX,YAAY,CAACa,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACH,QAAQ,CAAC,CAAC;EAC1D,CAAC;EAED,MAAMI,MAAM,GAAGA,CAAA,KAAM;IACjBjB,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/B;EACJ,CAAC;EAED,MAAMS,KAAK,GAAG;IACVnB,IAAI;IACJW,KAAK;IACLO,MAAM;IACNE,eAAe,EAAE,CAAC,EAACpB,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEa,KAAK;IAAE;IAChCA,KAAK,EAAEb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,KAAK;IAClBE,IAAI,EAAEf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEe;EAChB,CAAC;EAED,oBAAOpB,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAArB,QAAA,EAAEA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAChF,CAAC;;AAED;AAAA1B,EAAA,CA1CaF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AA2CzB,OAAO,MAAM8B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,OAAOpC,UAAU,CAACI,WAAW,CAAC;AAClC,CAAC;AAACgC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}