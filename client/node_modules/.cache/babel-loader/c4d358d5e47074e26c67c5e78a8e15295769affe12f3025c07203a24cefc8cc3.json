{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: '/api',\n  // Proxied to http://localhost:5001/api (or your backend)\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the token in headers\napi.interceptors.request.use(config => {\n  const authData = localStorage.getItem('auth');\n  if (authData) {\n    const token = JSON.parse(authData).token;\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Optional: Add a response interceptor to handle global errors like 401 Unauthorized\napi.interceptors.response.use(response => response,\n// Simply return response on success\nerror => {\n  if (error.response && error.response.status === 401) {\n    console.log(\"Unauthorized or token expired. Logging out.\");\n    // Trigger logout from AuthContext or directly manipulate localStorage/redirect\n    localStorage.removeItem('auth');\n    // Redirect to login page - use window.location or React Router's navigate\n    window.location.href = '/login'; // Simple redirect\n  }\n  // Return the error so components can handle specific errors too\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","authData","localStorage","getItem","token","JSON","parse","error","Promise","reject","response","status","console","log","removeItem","window","location","href"],"sources":["D:/mern_app_mini/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: '/api', // Proxied to http://localhost:5001/api (or your backend)\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Add a request interceptor to include the token in headers\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const authData = localStorage.getItem('auth');\r\n        if (authData) {\r\n            const token = JSON.parse(authData).token;\r\n            if (token) {\r\n                config.headers['Authorization'] = `Bearer ${token}`;\r\n            }\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Optional: Add a response interceptor to handle global errors like 401 Unauthorized\r\napi.interceptors.response.use(\r\n    (response) => response, // Simply return response on success\r\n    (error) => {\r\n        if (error.response && error.response.status === 401) {\r\n            console.log(\"Unauthorized or token expired. Logging out.\");\r\n            // Trigger logout from AuthContext or directly manipulate localStorage/redirect\r\n             localStorage.removeItem('auth');\r\n             // Redirect to login page - use window.location or React Router's navigate\r\n             window.location.href = '/login'; // Simple redirect\r\n        }\r\n        // Return the error so components can handle specific errors too\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,MAAM;EAAE;EACjBC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC7C,IAAIF,QAAQ,EAAE;IACV,MAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC,CAACG,KAAK;IACxC,IAAIA,KAAK,EAAE;MACPJ,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUQ,KAAK,EAAE;IACvD;EACJ;EACA,OAAOJ,MAAM;AACjB,CAAC,EACAO,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAd,GAAG,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CACxBW,QAAQ,IAAKA,QAAQ;AAAE;AACvBH,KAAK,IAAK;EACP,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjDC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1D;IACCX,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC;IAC/B;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;EACtC;EACA;EACA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}